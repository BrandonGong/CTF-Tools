#! /usr/bin/ python3
import argparse
from string import ascii_uppercase,ascii_lowercase,digits

def _generate(length = 0):
    pattern = ''
    for u in ascii_uppercase:
        for l in ascii_lowercase:
            for d in digits:
                pattern += u + l + d
                if length > 0 and len(pattern) >= length:
                    return pattern
    return pattern

def _search(search):
    pattern = _generate()
    if '0x' in search:
        search = search[2::]
        search = ''.join([chr(b) for b in reversed(bytearray.fromhex(search)) if b > 31 and b < 128])
    return pattern.find(search)

def generate(args):
    print(_generate(args.length))

def search(args):
    index = _search(args.pattern)
    if index >= 0:
        print(f"Offset found at {index}")
    else:
        print("Pattern not found.")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generates a search string for findings desired offsets for buffer overflows")
    subparser = parser.add_subparsers(title="command",
                                      description="Choose to either generate a search string or find the offset of a pattern in the string",
                                      help="{generate: Generates a search pattern, search: Find the offset for the memory address or pattern}")

    parser_gen = subparser.add_parser("generate")
    parser_gen.add_argument("length",type=int)
    parser_gen.set_defaults(func=generate)

    parser_src = subparser.add_parser("search")
    parser_src.add_argument("pattern",type=str,help="Search for the offset of the pattern or memory address starting with 0x")
    parser_src.set_defaults(func=search)

    args = parser.parse_args()
    if hasattr(args,'func'):
        args.func(args)
    else:
        parser.parse_args(['-h'])




